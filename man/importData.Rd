% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/importData.R
\name{importData}
\alias{importData}
\title{importData}
\usage{
importData(
  type = "local",
  server = NA,
  dbname = "FFI_RA_AGFO",
  new_env = T,
  export = F,
  export_path = NA,
  import_path = NA
)
}
\arguments{
\item{type}{Indicate how to import the database tables
\describe{
\item{"local"}{Import tables in 'dbo' schema from the local installation of an FFI database in SQL Server Management Studio (SSMS).}
\item{"server"}{Import tables in 'dbo' schema from the FFI database on the production SQL Server (not enabled).}
\item{"csv"}{ Import zip file containing csvs that were exported from the FFI database. Option doesn't require SSMS to be installed (not yet enabled).}
}}

\item{server}{If type = 'server', requires quoted FFI server address (not currently enabled).}

\item{dbname}{If type = "server" or "local", quoted name of database matching the name of the database (eg. "FFI_RA_AGFO"). If
multiple database names are specified, views will be row bound for tables in common for all of the databases with a column
indicating the dbname in each table. Note that the tables being row binded must be identical for this to work, and there
aren't thorough checks built in the function to ensure that's true (i.e., it's likely to fail, but the error message may be weird).}

\item{new_env}{Logical. If TRUE (default), will import tables to NGPN_tables environment. If FALSE, will import tables to global
environment.}

\item{export}{Logical. If TRUE, will export a zip file of csvs to specified export_path.}

\item{export_path}{Quoted string to export zipped csvs to if export = TRUE. If not specified, will export to the working directory.}

\item{import_path}{Quoted string to import a zipped file of csvs if type = 'csv'. The name of the zipped file should be included
in the path. Can specify multiple paths to import multiple parks/projects.}
}
\value{
Either an environment with database tables as data frames for each imported database, or database
tables directly in the global environment.
}
\description{
Imports data from FFI SQL Server database or csvs of FFI database tables using the schema designed for
the Northern Great Plains Network plant community monitoring protocol. Currently can only import from a local installation
of a park FFI database in SQL Server Management Studio (SSMS), but the goal is to add an option for importing directly
from the SQL Server where the production FFI databases are housed. If multiple parks worth of data are imported, tables
are row binded, so that all NPGN parks can be queried, summarized, etc. at once.
}
\examples{
\dontrun{
#--- From Local install of FFI SQL databases
# Import data for AGFO and export tables to zip file
importData(type = 'local', dbname = c("FFI_RA_AGFO"), export = T)

# Import data for all NGPN parks (takes a few seconds) from local copy on SSMS
importData(type = 'local',
           dbname = c("FFI_RA_AGFO", "FFI_RA_BADL", "FFI_RA_DETO", "FFI_RA_FOLA",
                      "FFI_RA_FOUS", "FFI_RA_JECA", "FFI_RA_KNRI", "FFI_RA_MNRR",
                      "FFI_RA_MORU", "FFI_RA_SCBL", "FFI_RA_THRO", "FFI_RA_WICA"),
           export = T,
           export_path = "C:/temp")

# Check that the multiple-park import worked
table(NGPN_tables$MacroPlot$datasource)

#--- From zipped csvs of FFI data
# Import THRO from zip file
importData(type = 'csv', import_path = "C:/temp/FFI_RA_THRO.zip")

# Import zipped files of NGPN parks and export as 1 zip file with all parks included
zips <- c("NGPN_FFI_tables_AGFO_20250508.zip", "NGPN_FFI_tables_BADL_20250508.zip", "NGPN_FFI_tables_DETO_20250508.zip",
          "NGPN_FFI_tables_FOLA_20250508.zip", "NGPN_FFI_tables_FOUS_20250508.zip", "NGPN_FFI_tables_JECA_20250508.zip",
          "NGPN_FFI_tables_KNRI_20250508.zip", "NGPN_FFI_tables_MORU_20250508.zip", "NGPN_FFI_tables_SCBL_20250508.zip",
          "NGPN_FFI_tables_THRO_20250508.zip", "NGPN_FFI_tables_WICA_20250508.zip")
filepath = "C:/Users/KMMiller/OneDrive - DOI/MWR/NGPN_veg/FFI_zips/"
zips_full <- paste0(filepath, zips)
importData(type = 'csv', import_path = zips_full, export = T)

}

}
